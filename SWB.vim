" http://www.cse.yorku.ca/~oz/marsaglia-rng.html
if 0x7fffffff <= 0 || 0x7fffffff+1 >= 0
    throw 'need 32 bits'
endif

" #define UC (unsigned char) /*a cast operation*/
" #define SWB (c++,bro=(x&lt;y),t[c]=(x=t[UC(c+34)])-(y=t[UC(c+19)]+bro))
" The cast is needed because in C 1 + $uint8 does integer arithmetic,
" so the macro without the cast would overflow 256 elements.
" Btw, read the paper by L'Ecuyer -- you would never guess what this generator
" looks like just by reading the code...

let s:t = range(256)
let s:c = 0
let s:borrow = 0

function! SWB()
    let s:c = (s:c + 1) % 256
    let t = s:t
    let c = s:c
    let x = t[(c+34)%256]
    let y = t[(c+19)%256] + s:borrow
    " Unsigned comparison x<y
    if x >= 0
        if y >= 0
            let s:borrow = (x < y)
        else
            let s:borrow = 1
        endif
    else
        if y >= 0
            let s:borrow = 0
        else
            let s:borrow = (x < y)
        endif
    endif
    let t[c] = x - y
    return t[c]
endfunction

" All seeds are ok except for the two trivial ones (think base ten)
" -- they can't happen with an LCG.
function! SWB_srand(seed)
    let x = a:seed
    for i in range(256)
        let s:t[i] = x
        let x = x * 69069 + 1234567
    endfor
    let s:borrow = 0
    let s:c = 0
endfunction
call SWB_srand(localtime())
let s:t[42] += getpid()

if len($DEBUG) > 0
    " the test code requires porting KISS or copying the initialized array...
    let s:t = [
                \ 3444715520,  589627959, 1852145839, 1474265681,
                \ 1993127274, 2857940909, 2250181688, 1758786885,
                \ 2648200516, 3869276561, 2131109435, 3448185628,
                \ 1031138409, 1251313198, 3212840128, 2372025478,
                \ 3036010335,  804934505, 3911956942, 2392823437,
                \ 1006134078, 1365723494, 1825619600, 2362330954,
                \ 3662377205,   47556407,  927442372, 1809363575,
                \   50559844,  535744360, 2869379169, 3507056475,
                \ 4028552258, 4084264384, 3545253694,  727759159,
                \ 2654534117, 3533850408,  304476320, 1764902585,
                \ 3679535483, 1403824263,  834926528, 3713675177,
                \ 2170354971, 4114394043,  130927612,  282952029,
                \ 2968809523, 3602074780, 3693234238, 3935779525,
                \ 4252866265, 1395277872,  667163033, 1147112852,
                \ 1587818444,  792412337,  204831206, 1551942735,
                \ 2359110429, 4196550158, 2674773592, 4293179457,
                \ 1064612766, 1513436951, 3188416084, 3881802103,
                \ 1948692362, 3490069274, 1862523903, 1095295803,
                \  351710150, 2463825887, 3707440418, 1512411940,
                \  319358280, 1920961757, 2779542203, 1485468529,
                \ 3495985109, 1286668255, 1351892342, 1520856886,
                \ 3299209310, 3214982838, 2677774711, 1526350562,
                \ 1760324146, 2081481100, 3799603074,  149889485,
                \ 3076011032, 2859215584, 3154421752, 1815946240,
                \  347370820,  737664179, 3237266725, 2407857342,
                \ 3579310210, 2547778315, 2049832610, 2137532637,
                \ 3529594535, 3780058177, 3589887133, 1372294963,
                \ 2064299265, 4074784224, 1313827789, 2964267889,
                \ 4273698787, 3462965074, 2664897851, 4253389708,
                \ 1039607481, 3278618941, 3090152390, 3824433171,
                \ 3271035935, 2539015026, 2046789971,  709477519,
                \  433921941,  750683020, 3531235443, 3308066230,
                \  612637020, 1706458371, 3446844314, 3726803551,
                \  553043350, 1482744084, 1347662155, 1305578732,
                \ 3594677322, 1489645083, 1959332212,  437229145,
                \  187782346, 1781868579,   27681368, 1400042057,
                \ 1118846718, 3345622882, 2272713889, 2978416100,
                \  615822425, 4067047814,  826286420, 2239310652,
                \ 3681231216, 3105564630,  214685676, 4045994565,
                \  308613449, 1398994572, 2030420609, 3333349787,
                \ 1617601581, 3302743289, 4041150887, 2007052644,
                \ 1265002717, 1859030124, 1386709160, 3190496627,
                \ 3676023138, 3142527399, 4136630278, 1553025939,
                \   79421320, 1550860049, 3293858257, 1864730241,
                \  742026642,  301833874, 3979643423, 3265481090,
                \ 2096184672, 2309979351, 3241215696, 1154856658,
                \  819869785, 1858497240,  923479652, 2598431294,
                \ 2065267425, 2909206677, 1606335486, 3334236076,
                \ 3934221624, 3419762829, 3875133691,  382578678,
                \ 3192117824,  505678928, 3898267352,   95968481,
                \ 3699565520,  882202361, 4293193763, 3918914979,
                \ 3313751816, 3709105074, 2794105100, 3241694746,
                \  942070142, 2832737836,  614516447,  353963846,
                \ 1479714362, 2758563050, 3289904971, 1039663995,
                \  370394114,  176879025, 3590204376,  160913434,
                \ 2350559687,  873237449, 1477310632, 3727399863,
                \ 1801381754, 2548083017, 2668966345, 1372528365,
                \ 3691739586, 1279645001, 3754587333, 2278192398,
                \ 1433520522, 4115832233, 3056969095, 2295443016,
                \ 1657648077,  843630300, 2473935165, 4018708818,
                \ 2158081974,  470260008, 3001227663,  412458272,
                \ 1722527672, 1861980050, 1730243661, 1161583444,
                \  776245256, 2000435315, 2675310267,  133667017,
                \  762714965,  993364084, 2316992894, 1904476135,
                \ ]
    if len(s:t) != 256
        throw 'ops'
    endif
    let s:c=64
    let s:borrow=0
    echomsg 'testing should take less than a minute on any 21st century PC...'
    " The original code prints a zero for each generator:
    "settable(12345,65435,34221,12345,9983651,95746118);
    "for(i=1;i<;1000001;i++){k=LFIB4;} printf("%u\n", k-1064612766U);
    "for(i=1;i<;1000001;i++){k=SWB ;} printf("%u\n", k- 627749721U);
    for i in range(1000001-1)
        let k = SWB()
    endfor
    if k != 627749721
        throw printf("k = %d    // should be %s", k, 627749721)
    endif
    echomsg 'tested ok'
endif


